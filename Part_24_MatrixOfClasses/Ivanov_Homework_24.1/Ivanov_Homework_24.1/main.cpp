#include <iostream>
#include "Student.h"
#include "Group.h"
using namespace std;

/*1. Разработать класс Group, который содержит динамический массив студентов (класс Student), и имеет следующие методы:
	 - конструктор по умолчанию						+
	 - конструктор с параметрами					+
	 - констр копирования							+
	 - деструктор									+
	 - op = для копирования групп					+
	 - op + для добавления студентов				+
	 - op += st для добавления студентов			+
	 - op += gr2 для добавления групп				не работает
	 - op == для сравнения групп					+
	 - op >= для сравнения групп					+
	 - op[] для получения доступа к студенту		+
	 - op() для сортировки студентов в группе		не сделал
	 - Add(Student) - добавление студента			+
	 - Print										+
	 - Save											+
	 - Load											не сделал																																	*/

void main()
{
	//создаю несколько обьектов класса Student (динамически)
	Student* s1 = new Student("Alex", "Petrov", 19, "Lenina st. 12", 23, 3.5);
	Student* s2 = new Student("Ivan", "Demidoff", 21, "Mayakovskogo st. 14", 24, 3.7);
	Student* s3 = new Student("Vasya", "Demidoff", 25, "Ostrovskogo st. 15", 25, 4.7);
	Student* s4 = new Student("Lena", "Petrova", 27, "Moskovskaya st. 16", 27, 4.8);
	Student* s5 = new Student("Anna", "Karenina", 24, "Donetskay st. 17", 26, 3.1);
	Student* s6 = new Student("Oleg", "Sergeev", 18, "Ilyicha st. 18", 34, 3.9);
	Student* s7 = new Student("Igor", "Karkarov", 17, "Cheluskintsev st. 19", 29, 3.2);
	Student* s8 = new Student("Vasiliy", "Makarevich", 20, "Mira st. 20", 39, 3.6);

	//1. создание одной группы, и добавление студентов
	Group g;
	g.Add(s1);
	g.Add(s2);
	g.Print();
	cout << "---------------------------------------------------------------------------------------\n";


	//2. создание второй группы, и вызов конструктора копирования
	Group g2 = g;
	g2.Print();
	cout << "---------------------------------------------------------------------------------------\n";


	//3. создание третьей группы, и вызов оператора =
	Group g3;
	g3 = g;
	g3.Print();
	cout << "---------------------------------------------------------------------------------------\n";


	//4. Вызов оператора +=  для добавления студентов в группу
	g3 += s3;
	g3 += s4;
	g3.Print();
	cout << "---------------------------------------------------------------------------------------\n";


	//5. Вызов оператора +  для добавления студентов в группу
	//(в данном операторе, группа не расширяется, а при попытке добавления лишнего 6го студента - выбрасывается исключение)
	try
	{
		g3 + s5;
		g3 + s6;
	}
	catch (const char* exception)
	{
		cout << "ERROR! " << exception << endl;
	}
	catch (...)
	{
		cout << "Unknown error!!!" << endl;
	}
	g3.Print();
	cout << "---------------------------------------------------------------------------------------\n";


	//6. Вызов оператора ==
	cout << (g == g2) << endl;	//при выводе будет 1, так как группы равны
	cout << (g == g3) << endl;	//при выводе будет 0, так как группы не равны
	cout << "---------------------------------------------------------------------------------------\n";


	//7. Вызов оператора >=
	cout << (g >= g2) << endl;	//при выводе будет 1, так как группы равны
	cout << (g >= g3) << endl;	//при выводе будет 0, так как g3 больше чем g
	cout << "---------------------------------------------------------------------------------------\n";


	//8. Вызов оператора[]
	//создаем указатель класса Student и присваиваем ему 2го студента из 1й группы
	Student* s9 = g[1];			//это "Ivan Demidoff"
	s9->Print();
	cout << "---------------------------------------------------------------------------------------\n";


	//9. Вызов оператора += для добавления группы (НЕ РАБОТАЕТ!)
	//создаем еще одну группу и добавляем пару студентов
	Group g4;
	g4.Add(s7);
	g4.Add(s8);
	//вызываем оператор += и выводим на экран группу (на экран выводится только студенты из первой оригинальной группы)
	g += g4;
	g.Print();
	cout << "---------------------------------------------------------------------------------------\n";


	//10. Сохранение 1й группы в файл
	g3.Save("result.txt");
}




